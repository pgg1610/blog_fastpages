{
  
    
        "post0": {
            "title": "Making equal spaces parity plots using Matplotlib",
            "content": "import os import matplotlib.pyplot as plt import numpy as np # High DPI rendering for mac # %config InlineBackend.figure_format = &#39;retina&#39; . X = np.linspace(0,5,200) Y = X + np.random.normal(0.01, size=X.shape) fig, ax = plt.subplots(1,1, figsize=(8,8)) ax.scatter(X, Y) . &lt;matplotlib.collections.PathCollection at 0x7fac528192e8&gt; . fig, ax = plt.subplots(1,1, figsize=(8,8)) ax.scatter(X, Y, label=&#39;data&#39;) lims = [np.min([ax.get_xlim(), ax.get_ylim()]), # min of both axes np.max([ax.get_xlim(), ax.get_ylim()]), # max of both axes ] ax.plot(lims, lims, &#39;k--&#39;, alpha=0.75, zorder=0, label=&#39;parity&#39;) ax.set_aspect(&#39;equal&#39;) ax.set_xlim(lims) ax.set_ylim(lims) ax.set_xlabel(&#39;X&#39;) ax.set_ylabel(&#39;Y&#39;) handles, labels = ax.get_legend_handles_labels() print(labels) ax.legend(handles=handles, labels=labels, title=&quot;Facet&quot;) . [&#39;parity&#39;, &#39;data&#39;] . &lt;matplotlib.legend.Legend at 0x7fac540e6f28&gt; .",
            "url": "https://pgg1610.github.io/blog_fastpages/python/plotting/2021/04/24/matplotlib-equal-aspect.html",
            "relUrl": "/python/plotting/2021/04/24/matplotlib-equal-aspect.html",
            "date": " • Apr 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Bayesian Neural Networks",
            "content": "import torch from torch import nn, optim import numpy as np . import matplotlib.pyplot as plt from matplotlib.pyplot import cm %config InlineBackend.figure_format = &#39;retina&#39; plot_params = { &#39;font.size&#39; : 22, &#39;axes.titlesize&#39; : 24, &#39;axes.labelsize&#39; : 20, &#39;axes.labelweight&#39; : &#39;bold&#39;, &#39;lines.linewidth&#39; : 3, &#39;lines.markersize&#39; : 10, &#39;xtick.labelsize&#39; : 16, &#39;ytick.labelsize&#39; : 16, } plt.rcParams.update(plot_params) . print(torch.cuda.device_count()) # Device configuration device = torch.device(&#39;cuda&#39; if torch.cuda.is_available() else &#39;cpu&#39;) print(device) . 1 cuda . m = 100 x = (torch.rand(m) - 0.5) * 20 #Returns a tensor filled with random numbers from a uniform distribution on the interval [0, 1) y = x * torch.sin(x) #y = 2 * torch.exp( - torch.sin( (x/2)**2 )) . fig, ax = plt.subplots(1,1, figsize=(5,5)) ax.plot(x.numpy(), y.numpy(), &#39;o&#39;) ax.axis(&#39;equal&#39;); . class MLP(nn.Module): def __init__(self, hidden_layers=[20, 20], droprate=0.2, activation=&#39;relu&#39;): super(MLP, self).__init__() self.model = nn.Sequential() self.model.add_module(&#39;input&#39;, nn.Linear(1, hidden_layers[0])) if activation == &#39;relu&#39;: self.model.add_module(&#39;relu0&#39;, nn.ReLU()) elif activation == &#39;tanh&#39;: self.model.add_module(&#39;tanh0&#39;, nn.Tanh()) for i in range(len(hidden_layers)-1): self.model.add_module(&#39;dropout&#39;+str(i+1), nn.Dropout(p=droprate)) self.model.add_module(&#39;hidden&#39;+str(i+1), nn.Linear(hidden_layers[i], hidden_layers[i+1])) if activation == &#39;relu&#39;: self.model.add_module(&#39;relu&#39;+str(i+1), nn.ReLU()) elif activation == &#39;tanh&#39;: self.model.add_module(&#39;tanh&#39;+str(i+1), nn.Tanh()) self.model.add_module(&#39;dropout&#39;+str(i+2), nn.Dropout(p=droprate)) self.model.add_module(&#39;final&#39;, nn.Linear(hidden_layers[i+1], 1)) def forward(self, x): return self.model(x) . net = MLP(hidden_layers=[200, 100, 80], droprate=0.1).to(device) #Move model to the GPU print(net) . MLP( (model): Sequential( (input): Linear(in_features=1, out_features=200, bias=True) (relu0): ReLU() (dropout1): Dropout(p=0.1, inplace=False) (hidden1): Linear(in_features=200, out_features=100, bias=True) (relu1): ReLU() (dropout2): Dropout(p=0.1, inplace=False) (hidden2): Linear(in_features=100, out_features=80, bias=True) (relu2): ReLU() (dropout3): Dropout(p=0.1, inplace=False) (final): Linear(in_features=80, out_features=1, bias=True) ) ) . criterion = nn.MSELoss() optimizer = optim.Adam(net.parameters(), lr=0.005, weight_decay=0.00001) . x_dev = x.view(-1, 1).to(device) . for epoch in range(6000): x_dev = x.view(-1, 1).to(device) y_dev = y.view(-1, 1).to(device) y_hat = net(x_dev) loss = criterion(y_hat, y_dev) optimizer.zero_grad() loss.backward() optimizer.step() if epoch % 500 == 0: print(&#39;Epoch[{}] - Loss:{}&#39;.format(epoch, loss.item())) . Epoch[0] - Loss:13.978106498718262 Epoch[500] - Loss:1.8814525604248047 Epoch[1000] - Loss:0.8525617122650146 Epoch[1500] - Loss:0.5456532835960388 Epoch[2000] - Loss:0.5604020357131958 Epoch[2500] - Loss:0.49089789390563965 Epoch[3000] - Loss:0.35926154255867004 Epoch[3500] - Loss:0.33446982502937317 Epoch[4000] - Loss:0.49845507740974426 Epoch[4500] - Loss:0.2624220848083496 Epoch[5000] - Loss:0.17623820900917053 Epoch[5500] - Loss:0.2600337862968445 . XX = torch.linspace(-11, 11, 1000) . def predict_reg(model, X, T=10): model = model.train() Y_hat = list() with torch.no_grad(): for t in range(T): X_out = model(X.view(-1,1).to(device)) Y_hat.append(X_out.cpu().squeeze()) Y_hat = torch.stack(Y_hat) model = model.eval() with torch.no_grad(): X_out = model(X.view(-1,1).to(device)) Y_eval = X_out.cpu().squeeze() return Y_hat, Y_eval . %time y_hat, y_eval = predict_reg(net, XX, T=1000) mean_y_hat = y_hat.mean(axis=0) std_y_hat = y_hat.std(axis=0) . CPU times: user 14 µs, sys: 1 µs, total: 15 µs Wall time: 29.3 µs . fig, ax = plt.subplots(1,1, figsize=(10,10)) ax.plot(XX.numpy(), mean_y_hat.numpy(), &#39;C1&#39;, label=&#39;prediction&#39;) ax.fill_between(XX.numpy(), (mean_y_hat + std_y_hat).numpy(), (mean_y_hat - std_y_hat).numpy(), color=&#39;C2&#39;, label=&#39;confidence&#39;) ax.plot(x.numpy(), y.numpy(), &#39;oC0&#39;, label=&#39;ground truth&#39;) ax.plot(XX.numpy(), (XX * torch.sin(XX)).numpy(), &#39;k&#39;, label=&#39;base function&#39;) ax.axis(&#39;equal&#39;) plt.legend() . &lt;matplotlib.legend.Legend at 0x7fb054b64978&gt; .",
            "url": "https://pgg1610.github.io/blog_fastpages/python/pytorch/machine-learning/plotting/2021/01/11/Simple_Dropout.html",
            "relUrl": "/python/pytorch/machine-learning/plotting/2021/01/11/Simple_Dropout.html",
            "date": " • Jan 11, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Sp_500",
            "content": "from requests import get import numpy as np import pandas as pd from bs4 import BeautifulSoup import time as time from tqdm import tqdm import yfinance as yf from IPython.core.display import clear_output . import matplotlib.pyplot as plt from matplotlib.pyplot import cm import seaborn as sns sns.set(style=&quot;whitegrid&quot;) sns.color_palette(&quot;husl&quot;) %config InlineBackend.figure_format = &#39;retina&#39; plot_params = { &#39;font.size&#39; : 30, &#39;axes.titlesize&#39; : 24, &#39;axes.labelsize&#39; : 20, &#39;axes.labelweight&#39; : &#39;bold&#39;, &#39;lines.linewidth&#39; : 3, &#39;lines.markersize&#39; : 10, &#39;xtick.labelsize&#39; : 16, &#39;ytick.labelsize&#39; : 16, } plt.rcParams.update(plot_params) . ## First: Get list of S&amp;P 500 companies . wiki_url = &#39;https://en.wikipedia.org/wiki/List_of_S%26P_500_companies&#39; response = get(wiki_url) html_soup = BeautifulSoup(response.text, &#39;html.parser&#39;) tab = html_soup.find(&quot;table&quot;,{&quot;class&quot;:&quot;wikitable sortable&quot;}) . column_headings = [entry.text.strip() for entry in tab.findAll(&#39;th&#39;)] print(column_headings) . [&#39;Symbol&#39;, &#39;Security&#39;, &#39;SEC filings&#39;, &#39;GICS Sector&#39;, &#39;GICS Sub-Industry&#39;, &#39;Headquarters Location&#39;, &#39;Date first added&#39;, &#39;CIK&#39;, &#39;Founded&#39;] . SP_500_dict = {keys:[] for keys in column_headings} . for i, name in enumerate(SP_500_dict.keys()): print(i, name) . 0 Symbol 1 Security 2 SEC filings 3 GICS Sector 4 GICS Sub-Industry 5 Headquarters Location 6 Date first added 7 CIK 8 Founded . ## Populate each row entry as per company data . for row_entry in tab.findAll(&#39;tr&#39;)[1:]: row_elements = row_entry.findAll(&#39;td&#39;) for key, _elements in zip(SP_500_dict.keys(), row_elements): SP_500_dict[key].append(_elements.text.strip()) . SP_500_df = pd.DataFrame(SP_500_dict, columns=SP_500_dict.keys()) . SP_500_df . Symbol Security SEC filings GICS Sector GICS Sub-Industry Headquarters Location Date first added CIK Founded . 0 MMM | 3M Company | reports | Industrials | Industrial Conglomerates | St. Paul, Minnesota | 1976-08-09 | 0000066740 | 1902 | . 1 ABT | Abbott Laboratories | reports | Health Care | Health Care Equipment | North Chicago, Illinois | 1964-03-31 | 0000001800 | 1888 | . 2 ABBV | AbbVie Inc. | reports | Health Care | Pharmaceuticals | North Chicago, Illinois | 2012-12-31 | 0001551152 | 2013 (1888) | . 3 ABMD | ABIOMED Inc | reports | Health Care | Health Care Equipment | Danvers, Massachusetts | 2018-05-31 | 0000815094 | 1981 | . 4 ACN | Accenture plc | reports | Information Technology | IT Consulting &amp; Other Services | Dublin, Ireland | 2011-07-06 | 0001467373 | 1989 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 500 YUM | Yum! Brands Inc | reports | Consumer Discretionary | Restaurants | Louisville, Kentucky | 1997-10-06 | 0001041061 | 1997 | . 501 ZBRA | Zebra Technologies | reports | Information Technology | Electronic Equipment &amp; Instruments | Lincolnshire, Illinois | 2019-12-23 | 0000877212 | 1969 | . 502 ZBH | Zimmer Biomet | reports | Health Care | Health Care Equipment | Warsaw, Indiana | 2001-08-07 | 0001136869 | 1927 | . 503 ZION | Zions Bancorp | reports | Financials | Regional Banks | Salt Lake City, Utah | 2001-06-22 | 0000109380 | 1873 | . 504 ZTS | Zoetis | reports | Health Care | Pharmaceuticals | Florham Park, New Jersey | 2013-06-21 | 0001555280 | 1952 | . 505 rows × 9 columns . SP_500_df[&#39;GICS Sector&#39;].value_counts() . Information Technology 74 Industrials 73 Financials 65 Health Care 63 Consumer Discretionary 61 Consumer Staples 32 Real Estate 30 Materials 28 Utilities 28 Communication Services 26 Energy 25 Name: GICS Sector, dtype: int64 . fig, ax = plt.subplots(1,1, figsize=(10,10)) SP_500_df[&#39;GICS Sector&#39;].value_counts().plot.pie(y=&#39;GICS Sector&#39;, autopct=&#39;%1.1f%%&#39;, fontsize=20, ax = ax, colormap=&#39;tab20&#39;) plt.axis(&#39;off&#39;) . (-1.25, 1.25, -1.25, 1.25) . SP_500_df.loc[ SP_500_df[&#39;GICS Sector&#39;] == &#39;Energy&#39;] . Symbol Security SEC filings GICS Sector GICS Sub-Industry Headquarters Location Date first added CIK Founded . 44 APA | Apache Corporation | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Houston, Texas | 1997-07-28 | 0000006769 | 1954 | . 59 BKR | Baker Hughes Co | reports | Energy | Oil &amp; Gas Equipment &amp; Services | Houston, Texas | 2017-07-07 | 0001701605 | 2017 | . 80 COG | Cabot Oil &amp; Gas | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Houston, Texas | 2008-06-23 | 0000858470 | 1989 | . 100 CVX | Chevron Corp. | reports | Energy | Integrated Oil &amp; Gas | San Ramon, California | 1957-03-04 | 0000093410 | 1879 | . 120 CXO | Concho Resources | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Midland, Texas | 2016-02-22 | 0001358071 | 2004 | . 121 COP | ConocoPhillips | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Houston, Texas | 1957-03-04 | 0001163165 | 2002 | . 140 DVN | Devon Energy | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Oklahoma City, Oklahoma | 2000-08-30 | 0001090012 | 1971 | . 142 FANG | Diamondback Energy | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Midland, Texas | 2018-12-03 | 0001539838 | 2007 | . 169 EOG | EOG Resources | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Houston, Texas | 2000-11-02 | 0000821189 | 1999 | . 183 XOM | Exxon Mobil Corp. | reports | Energy | Integrated Oil &amp; Gas | Irving, Texas | 1957-03-04 | 0000034088 | 1999 | . 219 HAL | Halliburton Co. | reports | Energy | Oil &amp; Gas Equipment &amp; Services | Houston, Texas | 1957-03-04 | 0000045012 | 1919 | . 227 HES | Hess Corporation | reports | Energy | Integrated Oil &amp; Gas | New York, New York | 1984-05-31 | 0000004447 | 1919 | . 230 HFC | HollyFrontier Corp | reports | Energy | Oil &amp; Gas Refining &amp; Marketing | Dallas, Texas | 2018-06-18 | 0000048039 | 1947 | . 274 KMI | Kinder Morgan | reports | Energy | Oil &amp; Gas Storage &amp; Transportation | Houston, Texas | 2012-05-25 | 0001506307 | 1997 | . 298 MRO | Marathon Oil Corp. | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Houston, Texas | 1991-05-01 | 0000101778 | 1887 | . 299 MPC | Marathon Petroleum | reports | Energy | Oil &amp; Gas Refining &amp; Marketing | Findlay, Ohio | 2011-07-01 | 0001510295 | 2009 (1887) | . 344 NOV | NOV Inc. | reports | Energy | Oil &amp; Gas Equipment &amp; Services | Houston, Texas | 2005-03-14 | 0001021860 | 1841 | . 350 OXY | Occidental Petroleum | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Houston, Texas | 1982-12-31 | 0000797468 | 1920 | . 353 OKE | ONEOK | reports | Energy | Oil &amp; Gas Storage &amp; Transportation | Tulsa, Oklahoma | 2010-03-15 | 0001039684 | 1906 | . 369 PSX | Phillips 66 | reports | Energy | Oil &amp; Gas Refining &amp; Marketing | Houston, Texas | 2012-05-01 | 0001534701 | 2012 (1917) | . 371 PXD | Pioneer Natural Resources | reports | Energy | Oil &amp; Gas Exploration &amp; Production | Irving, Texas | 2008-09-24 | 0001038357 | 1997 | . 407 SLB | Schlumberger Ltd. | reports | Energy | Oil &amp; Gas Equipment &amp; Services | Curaçao, Kingdom of the Netherlands | 1965-03-31 | 0000087347 | 1926 | . 434 FTI | TechnipFMC | reports | Energy | Oil &amp; Gas Equipment &amp; Services | London, United Kingdom | 2009-06-05 | 0001681459 | 2017 (1958) | . 463 VLO | Valero Energy | reports | Energy | Oil &amp; Gas Refining &amp; Marketing | San Antonio, Texas | | 0001035002 | 1980 | . 493 WMB | Williams Companies | reports | Energy | Oil &amp; Gas Storage &amp; Transportation | Tulsa, Oklahoma | 1975-03-31 | 0000107263 | 1908 | . We can parse these tables and search companies based on the sector . SP_500_df.loc[ SP_500_df[&#39;GICS Sector&#39;] == &#39;Information Technology&#39;] . Symbol Security SEC filings GICS Sector GICS Sub-Industry Headquarters Location Date first added CIK Founded . 4 ACN | Accenture plc | reports | Information Technology | IT Consulting &amp; Other Services | Dublin, Ireland | 2011-07-06 | 0001467373 | 1989 | . 6 ADBE | Adobe Inc. | reports | Information Technology | Application Software | San Jose, California | 1997-05-05 | 0000796343 | 1982 | . 7 AMD | Advanced Micro Devices Inc | reports | Information Technology | Semiconductors | Santa Clara, California | 2017-03-20 | 0000002488 | 1969 | . 13 AKAM | Akamai Technologies Inc | reports | Information Technology | Internet Services &amp; Infrastructure | Cambridge, Massachusetts | 2007-07-12 | 0001086222 | 1998 | . 38 APH | Amphenol Corp | reports | Information Technology | Electronic Components | Wallingford, Connecticut | 2008-09-30 | 0000820313 | 1932 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | . 488 WDC | Western Digital | reports | Information Technology | Technology Hardware, Storage &amp; Peripherals | San Jose, California | 2009-07-01 | 0000106040 | 1970 | . 489 WU | Western Union Co | reports | Information Technology | Data Processing &amp; Outsourced Services | Englewood, Colorado | 2006-09-29 | 0001365135 | 1851 | . 497 XRX | Xerox | reports | Information Technology | Technology Hardware, Storage &amp; Peripherals | Norwalk, Connecticut | | 0001770450 | 1906 | . 498 XLNX | Xilinx | reports | Information Technology | Semiconductors | San Jose, California | 1999-11-08 | 0000743988 | 1984 | . 501 ZBRA | Zebra Technologies | reports | Information Technology | Electronic Equipment &amp; Instruments | Lincolnshire, Illinois | 2019-12-23 | 0000877212 | 1969 | . 74 rows × 9 columns . ## Get total number of Shares . We will use yfinance to extact Tickr information for each SP500 company and use pandas datareader . yf_tickr = yf.Ticker(&#39;ADBE&#39;) yf_tickr.info[&#39;sharesOutstanding&#39;] #info has good summary info for the stock . import yfinance as yf . START_DATE = &quot;2020-01-01&quot; END_DATE = &quot;2020-07-26&quot; . yf_tickr = yf.Ticker(&#39;TSLA&#39;) . _shares_outstanding = yf_tickr.info[&#39;sharesOutstanding&#39;] _previous_close = yf_tickr.info[&#39;previousClose&#39;] print(&#39;Outstanding shares: {}&#39;.format(_shares_outstanding)) print(&#39;Market Cap: {} Million USD&#39;.format((_shares_outstanding * _previous_close)/10**6)) . Outstanding shares: 947900992 Market Cap: 800966.8592300799 Million USD . df_tckr = yf_tickr.history(start=START_DATE, end=END_DATE, interval=&quot;1wk&quot;, actions=False) df_tckr[&#39;Market_Cap&#39;] = df_tckr[&#39;Open&#39;] * _shares_outstanding df_tckr[&#39;YTD&#39;] = (df_tckr[&#39;Open&#39;] - df_tckr[&#39;Open&#39;][0]) * 100 / df_tckr[&#39;Open&#39;][0] . fig, ax = plt.subplots(1,1, figsize=(20,10)) df_tckr.plot(use_index=True, y=&quot;YTD&quot;,ax=ax, linewidth=4, grid=False, label=&#39;TSLA&#39;) ax.set_xlabel(&#39;Date&#39;) ax.set_ylabel(&#39;% YTD change (Weekly basis)&#39;) . Text(0, 0.5, &#39;% YTD change (Weekly basis)&#39;) . ## Plotting multiple companies . import time as time def plot_market_cap(tickr_list, START_DATE, END_DATE): total_data = {} for tickr in tickr_list: total_data[tickr] = {} print(&#39;Looking at: {}&#39;.format(tickr)) yf_tickr = yf.Ticker(tickr) #try: # _shares_outstanding = yf_tickr.info[&#39;sharesOutstanding&#39;] #except(IndexError): # print(&#39;Shares outstanding not found&#39;) # _shares_outstanding = None df_tckr = yf_tickr.history(start=START_DATE, end=END_DATE, actions=False) df_tckr[&#39;YTD&#39;] = (df_tckr[&#39;Open&#39;] - df_tckr[&#39;Open&#39;][0]) * 100 / df_tckr[&#39;Open&#39;][0] total_data[tickr][&#39;hist&#39;] = df_tckr #total_data[tickr][&#39;shares&#39;] = _shares_outstanding time.sleep(np.random.randint(10)) return total_data . tickr_list = [&#39;AAPL&#39;, &#39;TSLA&#39;,&#39;FB&#39;,&#39;DAL&#39;,&#39;XOM&#39;] #tickr_list = [&#39;S5INFT&#39;, &#39;SPX&#39;,&#39;XLG&#39;,&#39;SPN&#39;,&#39;S5INDU&#39;] #tickr_list = SP_500_df[&#39;Symbol&#39;].to_list() data = plot_market_cap(tickr_list, START_DATE, END_DATE) . Looking at: AAPL Looking at: TSLA Looking at: FB Looking at: DAL Looking at: XOM . company_name = [SP_500_df[SP_500_df[&#39;Symbol&#39;].str.contains(i)][&#39;Security&#39;].values[0] for i in tickr_list] . company_name . [&#39;Apple Inc.&#39;, &#39;Tesla, Inc.&#39;, &#39;Facebook, Inc.&#39;, &#39;Delta Air Lines Inc.&#39;, &#39;Exxon Mobil Corp.&#39;] . print(len(data[&#39;AAPL&#39;][&#39;hist&#39;][&#39;YTD&#39;])) . 142 . ytd_stat = pd.DataFrame() for tickr in tickr_list: print(len(data[tickr][&#39;hist&#39;][&#39;YTD&#39;])) ytd_stat[tickr] = data[tickr][&#39;hist&#39;][&#39;YTD&#39;].values . 142 142 142 142 142 . ytd_stat[&#39;Date&#39;] = ytd_stat.index . fig, ax = plt.subplots(1,1,figsize=(15,10)) for i, tickr in enumerate(tickr_list): ax.plot(ytd_stat[&#39;Date&#39;], ytd_stat[tickr], linewidth=5.0, label=company_name[i]) ax.set_ylabel(&#39;YTD %Return 2020&#39;) ax.set_xlabel(&#39;Date&#39;) ax.legend() . &lt;matplotlib.legend.Legend at 0x7fcaffa7da90&gt; .",
            "url": "https://pgg1610.github.io/blog_fastpages/python/plotting%20web-scrapping/2020/08/01/SP_500.html",
            "relUrl": "/python/plotting%20web-scrapping/2020/08/01/SP_500.html",
            "date": " • Aug 1, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Activation functions",
            "content": "import numpy as np import matplotlib.pyplot as plt %config InlineBackend.figure_format = &#39;retina&#39; import seaborn as sns sns.set_palette(&quot;deep&quot;) . ## Baseline reference . z = np.linspace(-10,10,100) . Sigmoid activation function . def sigmoid(z): return 1/(1+np.exp(-z)) # derivative of Sigmoid Function def dsigmoid(a): return a*(1-a) # returns a derivative od sigmoid function if a=sigmoid then a&#39;=a(1-a) . plt.plot(z, sigmoid(z), label = r&#39;$sigmoid$&#39;) plt.plot(z, dsigmoid(sigmoid(z)), label = r&#39;$ frac{ partial (sigmoid)}{ partial z}$&#39;) plt.legend(fontsize = 12) plt.xlabel(&#39;z&#39;) plt.show() . import torch x = torch.tensor(z, requires_grad=True) print(x.requires_grad) b = torch.sigmoid(x) . True . x . tensor([-10.0000, -9.7980, -9.5960, -9.3939, -9.1919, -8.9899, -8.7879, -8.5859, -8.3838, -8.1818, -7.9798, -7.7778, -7.5758, -7.3737, -7.1717, -6.9697, -6.7677, -6.5657, -6.3636, -6.1616, -5.9596, -5.7576, -5.5556, -5.3535, -5.1515, -4.9495, -4.7475, -4.5455, -4.3434, -4.1414, -3.9394, -3.7374, -3.5354, -3.3333, -3.1313, -2.9293, -2.7273, -2.5253, -2.3232, -2.1212, -1.9192, -1.7172, -1.5152, -1.3131, -1.1111, -0.9091, -0.7071, -0.5051, -0.3030, -0.1010, 0.1010, 0.3030, 0.5051, 0.7071, 0.9091, 1.1111, 1.3131, 1.5152, 1.7172, 1.9192, 2.1212, 2.3232, 2.5253, 2.7273, 2.9293, 3.1313, 3.3333, 3.5354, 3.7374, 3.9394, 4.1414, 4.3434, 4.5455, 4.7475, 4.9495, 5.1515, 5.3535, 5.5556, 5.7576, 5.9596, 6.1616, 6.3636, 6.5657, 6.7677, 6.9697, 7.1717, 7.3737, 7.5758, 7.7778, 7.9798, 8.1818, 8.3838, 8.5859, 8.7879, 8.9899, 9.1919, 9.3939, 9.5960, 9.7980, 10.0000], dtype=torch.float64, requires_grad=True) . b.backward(torch.ones(x.shape)) . x.grad . tensor([4.5396e-05, 5.5558e-05, 6.7994e-05, 8.3213e-05, 1.0184e-04, 1.2463e-04, 1.5252e-04, 1.8666e-04, 2.2843e-04, 2.7954e-04, 3.4207e-04, 4.1859e-04, 5.1221e-04, 6.2673e-04, 7.6682e-04, 9.3817e-04, 1.1477e-03, 1.4039e-03, 1.7172e-03, 2.1000e-03, 2.5677e-03, 3.1389e-03, 3.8362e-03, 4.6869e-03, 5.7241e-03, 6.9876e-03, 8.5250e-03, 1.0394e-02, 1.2661e-02, 1.5407e-02, 1.8724e-02, 2.2721e-02, 2.7521e-02, 3.3259e-02, 4.0084e-02, 4.8151e-02, 5.7615e-02, 6.8615e-02, 8.1257e-02, 9.5592e-02, 1.1158e-01, 1.2906e-01, 1.4771e-01, 1.6703e-01, 1.8633e-01, 2.0471e-01, 2.2118e-01, 2.3471e-01, 2.4435e-01, 2.4936e-01, 2.4936e-01, 2.4435e-01, 2.3471e-01, 2.2118e-01, 2.0471e-01, 1.8633e-01, 1.6703e-01, 1.4771e-01, 1.2906e-01, 1.1158e-01, 9.5592e-02, 8.1257e-02, 6.8615e-02, 5.7615e-02, 4.8151e-02, 4.0084e-02, 3.3259e-02, 2.7521e-02, 2.2721e-02, 1.8724e-02, 1.5407e-02, 1.2661e-02, 1.0394e-02, 8.5250e-03, 6.9876e-03, 5.7241e-03, 4.6869e-03, 3.8362e-03, 3.1389e-03, 2.5677e-03, 2.1000e-03, 1.7172e-03, 1.4039e-03, 1.1477e-03, 9.3817e-04, 7.6682e-04, 6.2673e-04, 5.1221e-04, 4.1859e-04, 3.4207e-04, 2.7954e-04, 2.2843e-04, 1.8666e-04, 1.5252e-04, 1.2463e-04, 1.0184e-04, 8.3213e-05, 6.7994e-05, 5.5558e-05, 4.5396e-05], dtype=torch.float64) . plt.plot(x.data.numpy(), b.data.numpy(), label = r&#39;$sigmoid$&#39;) plt.plot(x.data.numpy(), x.grad.data.numpy(), label = r&#39;$ frac{ partial (sigmoid)}{ partial z}$&#39;) plt.legend(fontsize = 12) . &lt;matplotlib.legend.Legend at 0x7f8b5f3ece48&gt; . np.unique(np.round((x.grad.data.numpy() - dsigmoid(sigmoid(z))),4)) . array([0.]) . Hyperbolic tangent activation function . def tanh(z): return np.tanh(z) # derivative of tanh def dtanh(a): return 1-np.power(a,2) . plt.plot(z, tanh(z),&#39;b&#39;, label = &#39;tanh&#39;) plt.plot(z, dtanh(tanh(z)),&#39;r&#39;, label=r&#39;$ frac{dtanh}{dz}$&#39;) plt.legend(fontsize = 12) plt.show() . ReLU (Rectified Linear Unit) Activation function . def ReLU(z): return np.maximum(0,z) # derivative of ReLu def dReLU(a): return 1*(a&gt;0) . plt.plot(z, ReLU(z),&#39;b&#39;, label =&#39;ReLU&#39;) plt.plot(z, dReLU(ReLU(z)),&#39;r&#39;, label=r&#39;$ frac{dReLU}{dz}$&#39;) plt.legend(fontsize = 12) plt.xlabel(&#39;z&#39;) plt.ylim(0,4) plt.xlim(-4,4) plt.show() . Leaky ReLU Activation function . def LeakyReLU(z): return np.maximum(0.01*z,z) # derivative of ReLu def dLeakyReLU(a): return 0.01*(a&gt;0) . plt.plot(z, LeakyReLU(z),&#39;b&#39;, label = &#39;LeakyReLU&#39;) plt.plot(z, dLeakyReLU(LeakyReLU(z)),&#39;r&#39;, label=r&#39;$ frac{dLeakyReLU}{dz}$&#39;) plt.legend(fontsize = 12) plt.xlabel(&#39;z&#39;) plt.ylim(0,4) plt.xlim(-4,4) plt.show() . Comparison of derivative for activation functions . plt.plot(z, dsigmoid(sigmoid(z)),label = r&#39;$ frac{dsigmoid}{dz}$&#39; ) plt.plot(z, dtanh(tanh(z)), label = r&#39;$ frac{dtanh}{dz}$&#39;) plt.plot(z, dReLU(ReLU(z)), label=r&#39;$ frac{dReLU}{dz}$&#39;) plt.plot(z, dLeakyReLU(LeakyReLU(z)), label=r&#39;$ frac{dLeakyReLU}{dz}$&#39;) plt.legend(fontsize = 12) plt.xlabel(&#39;z&#39;) plt.title(&#39;Derivatives of activation functions&#39;) plt.show() .",
            "url": "https://pgg1610.github.io/blog_fastpages/python/machine-learning/pytorch/2020/04/22/activation_functions.html",
            "relUrl": "/python/machine-learning/pytorch/2020/04/22/activation_functions.html",
            "date": " • Apr 22, 2020"
        }
        
    
  
    
        ,"post4": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://pgg1610.github.io/blog_fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post5": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://pgg1610.github.io/blog_fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Data aesthete at heart, I am a Ph.D. candidate in the Davidson School of Chemical Engineering at Purdue University, advised by Jeffrey P. Greeley. Understanding molecular-level behavior of the catalyst through data and science is at the heart of my Ph.D. research. . Besides research, I enjoy teaching and making scientific ideas accessible to the public. I have taught introductory chemistry and mathematics to middle-schoolers, and have assisted in designing modules that introduce critical thinking, logical reasoning, and coding in high-school curricula. . Outside of work, I enjoy cooking (link to some latest experiments), gaming, diving deep in arcane internet rabbit holes, reading philosophy, and going on longer-than-necessary bike rides. .",
          "url": "https://pgg1610.github.io/blog_fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://pgg1610.github.io/blog_fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}